//buildscript {
//    repositories { mavenLocal() }
//    dependencies { classpath 'org.dddjava.jig:jig-gradle-plugin:+' }
//}
plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE' apply false
    id 'com.gradle.plugin-publish' version '0.10.1' apply false
    id 'com.jfrog.bintray' version '1.8.4' apply false
    id 'org.dddjava.jig-gradle-plugin' version '2019.11.2' apply false
    id "com.github.hierynomus.license" version "0.15.0"
    id "org.jetbrains.kotlin.jvm" version "1.3.50" apply false
}

repositories {
    jcenter()
}

downloadLicenses {
    dependencyConfiguration = 'compileClasspath'
}

subprojects {
    apply plugin: 'java'

    group = 'org.dddjava.jig'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    def defaultEncoding = 'UTF-8'

    [AbstractCompile, Javadoc].each {
      tasks.withType(it).each { it.options.encoding = defaultEncoding }
    }

    repositories {
        jcenter()
    }

    dependencies {
        implementation platform('org.springframework.boot:spring-boot-dependencies:2.2.0.RELEASE')
        testImplementation platform('org.junit:junit-bom:5.5.2')

        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.platform:junit-platform-commons'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.assertj:assertj-core:3.14.0'
        testImplementation 'org.mockito:mockito-core'

        testImplementation('org.springframework:spring-test') {
            exclude group: 'junit'
        }
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

    jar {
        metaInf { from(rootDir) { include 'LICENSE' } }
    }
}

configure([project(":jig-core")]) {

    javadoc {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

String findSettingValue(String envName, String propertyName) {
    def env = System.getenv().get(envName)
    def property = env ? env : System.properties.getProperty(propertyName)
    property ? property : ''
}

project(':jig-core') {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'org.dddjava.jig-gradle-plugin'

    ext {
        artifactId = 'jig-core'
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId project.group
                artifactId project.artifactId
                version project.version
                from components.java
                pom {
                    name = "jig-core"
                    description = "Core of Jig"
                    url = "https://github.com/dddjava/Jig"
                    licenses {
                        license {
                            name = "The Apache Software License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            id = "irof"
                            name = "irof"
                            email = "irof@hogedriven.net"
                        }
                        developer {
                            id = "haljik"
                            name = "haljik"
                            email = "seiji.kawakami@sora-works.com"
                        }
                    }
                    scm {
                        url = "https://github.com/dddjava/Jig.git"
                    }
                }
            }
        }
    }

    bintray {
        user = findSettingValue('BINTRAY_USER', 'bintray.user');
        key = findSettingValue('BINTRAY_APIKEY', 'bintray.apikey')

        configurations = ['archives']
        publications = ['maven']
        pkg {
            repo = 'jig'
            name = 'jig-core'
            desc = 'core of Jig'
            userOrg = 'dddjava'
            websiteUrl = 'https://github.com/dddjava/Jig'
            vcsUrl = 'https://github.com/dddjava/Jig.git'
            licenses = ["Apache-2.0"]
            publish = true
            publicDownloadNumbers = true
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    dependencies {
        api 'org.springframework:spring-context'
        api 'org.slf4j:slf4j-api'
        api 'ch.qos.logback:logback-classic'

        // バイトコードの読み取り: infrastructure/asm
        api 'org.ow2.asm:asm:7.2'
        // SQLの取得: infrastructure/mybatis
        api 'org.mybatis:mybatis:3.5.3'
        // javadocコメントの取得: infrastructure/javaparser
        api 'com.github.javaparser:javaparser-core:3.15.0'
        api 'com.github.javaparser:java-symbol-solver-core:0.6.3'
        // excel出力: presentation/poi
        api 'org.apache.poi:poi:4.1.1'
        api 'org.apache.poi:poi-ooxml:4.1.1'
        // ダイアグラム出力: presentation/graphvizj
        api('guru.nidi:graphviz-java:0.10.1') {
            exclude group: 'com.eclipsesource.j2v8'
            exclude group: 'net.arnx', module: 'nashorn-promise'
            exclude group: 'com.google.code.findbugs'
            exclude group: 'org.apache.xmlgraphics'
        }

        testImplementation 'org.springframework:spring-web'
    }

    build.dependsOn(publishToMavenLocal)
    processResources {
        expand(version: version)
    }

    jigReports.dependsOn(clean, compileJava, processResources)
    jig {
        documentTypes = [
                'ServiceMethodCallHierarchyDiagram',
                'PackageRelationDiagram',
                //'BusinessRuleRelationDiagram',
                'ApplicationList',
                'BusinessRuleList',
                'BranchList',
                'CategoryUsageDiagram',
                'CategoryDiagram',
                'BooleanServiceDiagram',
                'PackageTreeDiagram']
    }
}

project(':jig-cli') {
    apply plugin: 'org.springframework.boot'

    dependencies {
        implementation project(':jig-core')
        implementation 'org.springframework.boot:spring-boot-starter'
    }

    bootJar {
        metaInf { from(rootDir) { include 'LICENSE' } }
        archiveName 'jig-cli.jar'
        manifest {
            attributes "Implementation-Version": (version ?: (LocalDate.now().format("uuuu.M.W") + "." + LocalDateTime.now().format("MMddHHmm") + ".LOCAL-SNAPSHOT" ))
        }
    }
}

project(':jig-cli-kt') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    dependencies {
        implementation project(':jig-core')
        implementation 'org.springframework.boot:spring-boot-starter'
        // kotlinのコメント取得: infrastructure/kotlinparser
        api 'org.jetbrains.kotlin:kotlin-compiler-embeddable:1.3.50'
        api 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50'
    }

    bootJar {
        metaInf { from(rootDir) { include 'LICENSE' } }
        archiveName 'jig-cli-kt.jar'
        manifest {
            attributes "Implementation-Version": (version ?: (LocalDate.now().format("uuuu.M.W") + ".LOCAL-SNAPSHOT" ))
        }
        requiresUnpack '**/kotlin-compiler-*.jar'
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }
}

project(':jig-gradle-plugin') {
    apply plugin: "java-gradle-plugin"
    apply plugin: 'com.gradle.plugin-publish'
    apply plugin: 'maven-publish'

    // Write the plugin's classpath to a file to share with the tests
    task createClasspathManifest {
        def outputDir = file("$buildDir/$name")

        inputs.files sourceSets.main.runtimeClasspath
        outputs.dir outputDir

        doLast {
            outputDir.mkdirs()
            file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
        }
    }

    dependencies {
        implementation project(':jig-core')
        implementation gradleApi()
        implementation localGroovy()
        // Add the classpath file to the test runtime classpath
        testRuntimeOnly files(createClasspathManifest)
    }

    jar {
        baseName = 'jig-gradle-plugin'
    }

    ext {
        artifactId = 'jig-gradle-plugin'
    }

    gradlePlugin {
        plugins {
            jigGradlePlugin {
                id = "org.dddjava.${project.artifactId}"
                implementationClass = 'org.dddjava.jig.gradle.JigGradlePlugin'
            }
        }
    }


    pluginBundle {
        website = 'https://github.com/dddjava/Jig'
        vcsUrl = 'https://github.com/dddjava/Jig.git'
        description = 'Visualizing code for DDD'
        tags = ['ddd', 'visualize']

        plugins {
            jigGradlePlugin {
                id = "org.dddjava.${project.artifactId}"
                displayName = 'Jig Gradle Plugin'
            }
        }
    }

    publishing {
        publications {
            puluginPublication(MavenPublication) {
                groupId project.group
                artifactId project.artifactId
                version project.version
                from components.java
            }
        }
    }

    task setupPluginUpload doLast {
        final def KEY_PROPERTY = "gradle.publish.key"
        final def SECRET_PROPERTY = "gradle.publish.secret"

        String key = findSettingValue('GRADLE_PUBLISH_KEY', KEY_PROPERTY)
        String secret = findSettingValue('GRADLE_PUBLISH_SECRET', SECRET_PROPERTY)

        if (key.isEmpty() || secret.isEmpty()) {
            throw new RuntimeException("GRADLE_PUBLISH_KEY and/or GRADLE_PUBLISH_SECRET are not defined environment variables")
        }

        System.properties.setProperty(KEY_PROPERTY, key)
        System.properties.setProperty(SECRET_PROPERTY, secret)
    }

    tasks.publishPlugins.dependsOn tasks.setupPluginUpload
    build.dependsOn(publishToMavenLocal)

    test.dependsOn(createClasspathManifest)

}
